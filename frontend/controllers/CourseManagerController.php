<?php
/**
 * Created by PhpStorm.
 * User: bactv
 * Date: 16/05/2017
 * Time: 2:27 CH
 */
namespace frontend\controllers;
use common\components\Utility;
use frontend\components\TeacherManagerController;
use frontend\models\Course;
use frontend\models\CourseTeacher;
use frontend\models\Lesson;
use frontend\models\LessonDocument;
use frontend\models\LessonQuiz;
use frontend\models\Teacher;
use Yii;
use yii\base\Exception;
use yii\data\ActiveDataProvider;
use yii\data\ArrayDataProvider;
use yii\web\NotFoundHttpException;
use yii\web\UploadedFile;

class CourseManagerController extends TeacherManagerController
{
    public function actions()
    {
        parent::actions(); // TODO: Change the autogenerated stub
        $this->layout = 'teacher_course_layout';
        $teacher = Teacher::findOne(['user_id' => $this->_user['id']]);
        Yii::$app->params['teacher'] = $teacher;
    }

    public function actionIndex()
    {
        $user = $this->_user;

        $dataProvider = Teacher::get_list_course_by_teacher($user->id);

        return $this->render('index', [
            'dataProvider' => $dataProvider
        ]);
    }

    public function actionCreate()
    {
        $model = new Course();

        $session = Yii::$app->session;

        if ($model->load(Yii::$app->request->post())) {
            $model->logo = UploadedFile::getInstance($model, 'logo');
            $model->teacher_ids = json_encode(array($this->_user['id']));
            $model->deadline_register = Utility::formatDataTime($model->deadline_register, '/', '-', false);
            if ($model->save() && $model->upload_file('logo', $model->id, 'logo')) {
                $course_teacher = new CourseTeacher();
                $course_teacher->course_id = $model->id;
                $course_teacher->teacher_id = $this->_user['id'];
                $course_teacher->course_name = $model->name;
                $course_teacher->teacher_name = Teacher::getAttributeValue(['user_id' => $this->_user['id']], 'full_name');

                $course_teacher->save(false);

                $session->setFlash('success', 'Chúc mừng bạn đã tạo khóa học thành công');
                return $this->redirect(['view', 'id' => $model->id]);
            } else {
                $session->setFlash('error', 'Có lỗi trong quá trình tạo khóa học, vui lòng thử lại sau.');
                return $this->render('create', [
                    'model' => $model
                ]);
            }
        }
        return $this->render('create', [
            'model' => $model
        ]);
    }

    public function actionUpdate($id)
    {
        $model = $this->findObject($id);

        $session = Yii::$app->session;
        $model->deadline_register = Utility::formatDataTime($model->deadline_register, '-', '/', false);
        if ($model->load(Yii::$app->request->post())) {
            $model->logo = UploadedFile::getInstance($model, 'logo');
            $model->teacher_ids = json_encode(array($this->_user['id']));
            $model->deadline_register = Utility::formatDataTime($model->deadline_register, '/', '-', false);

            if ($model->save() && $model->upload_file('logo', $model->id, 'logo')) {
                $session->setFlash('success', 'Chúc mừng bạn đã tạo khóa học thành công');
                return $this->redirect(['view', 'id' => $model->id]);
            } else {
                $session->setFlash('error', 'Có lỗi trong quá trình tạo khóa học, vui lòng thử lại sau.');
                return $this->render('create', [
                    'model' => $model
                ]);
            }
        }
        return $this->render('update', [
            'model' => $model
        ]);
    }

    public function actionView($id)
    {
        $model = $this->findObject($id);
        return $this->render('view', [
            'model' => $model
        ]);
    }

    public function actionLesson($course_id)
    {
        $course = $this->findObject($course_id);
        $dataProvider = new ActiveDataProvider([
           'query' =>  Lesson::find()->where(['course_id' => $course_id, 'deleted' => 0])->orderBy('publish_date ASC, id ASC')
        ]);
        $arr_course = Teacher::get_list_course_by_teacher2($this->_user['id']);

        return $this->render('lesson/index', [
            'course' => $course,
            'dataProvider' => $dataProvider,
            'arr_course' => $arr_course
        ]);
    }

    public function actionViewLesson($lesson_id, $course_id)
    {
        $model = $this->findObject2($lesson_id, $course_id);
        $all_lesson = Lesson::find()->where(['course_id' => $course_id, 'deleted' => 0])->orderBy('publish_date ASC, id ASC')->asArray()->all();
        return $this->render('lesson/view', [
            'model' => $model,
            'all_lesson' => $all_lesson
        ]);
    }

    public function actionCreateLesson($course_id)
    {
        $model = new Lesson();
        $session = Yii::$app->session;
        if ($model->load(Yii::$app->request->post())) {
            $model->video = UploadedFile::getInstance($model, 'video');
            $model->video_name = Utility::rewrite($model->video->baseName) . '.' . $model->video->extension;
            $model->course_id = $course_id;
            $model->publish_date = Utility::formatDataTime($model->publish_date, '/', '-', false);

            if ($model->save() && $model->upload_file('video', $model->course_id, $model->id, 'video')) {
                $session->setFlash('success', 'Thành công.');
                return $this->redirect(['view', 'id' => $model->id]);
            }
        } else {
            return $this->render('lesson/create', [
                'model' => $model,
            ]);
        }
    }

    public function actionUpdateLesson($lesson_id, $course_id)
    {
        $model = $this->findObject2($lesson_id, $course_id);

        $session = Yii::$app->session;
        $model->publish_date = Utility::formatDataTime($model->publish_date, '-', '/', false);
        if ($model->load(Yii::$app->request->post())) {
            $model->publish_date = Utility::formatDataTime($model->publish_date, '/', '-', false);
            $model->video = UploadedFile::getInstance($model, 'video');
            if ($model->video != '') {
                $model->video_name = Utility::rewrite($model->video->baseName) . '.' . $model->video->extension;
            }

            if ($model->save() && $model->upload_file('video', $model->course_id, $model->id, 'video')) {
                $session->setFlash('success', 'Thành công.');
                return $this->redirect(['view-lesson', 'lesson_id' => $model->id, 'course_id' => $model['course_id']]);
            }
        } else {
            return $this->render('lesson/update', [
                'model' => $model,
            ]);
        }
    }

    public function actionDeleteLesson($lesson_id, $course_id)
    {
        $model = $this->findObject2($lesson_id, $course_id);
        if ($model->approved != 1) {
            $model->deleted = 1;
            $model->save();
        }
        return $this->redirect(['lesson', 'course_id' => $course_id]);
    }

    public function actionLessonDocument($course_id, $lesson_id)
    {
        $lesson = $this->findObject2($lesson_id, $course_id);
        $dataProvider = new ActiveDataProvider([
            'query' => LessonDocument::find()->where(['lesson_id' => $lesson_id])
        ]);
        $arr_lesson = Lesson::find()->where(['course_id' => $course_id, 'deleted' => 0])->orderBy('publish_date ASC, id ASC')->asArray()->all();
        return $this->render('lesson/document/index', [
            'lesson' => $lesson,
            'dataProvider' => $dataProvider,
            'arr_lesson' => $arr_lesson
        ]);
    }

    public function actionCreateLessonDocument($course_id, $lesson_id)
    {
        $lesson = $this->findObject2($lesson_id, $course_id);
        $model = new LessonDocument();
        $model->scenario = 'create';

        if ($model->load(Yii::$app->request->post())) {
            $model->file = UploadedFile::getInstances($model, 'file');
            if ($model->upload_file($lesson->course_id, $lesson_id, 'document')) {
                foreach ($model->file as $file) {
                    $model2 = new LessonDocument();
                    $model2->lesson_id = $lesson_id;
                    $model2->document_name = Utility::rewrite($file->baseName) . '.' . $file->extension;

                    if (!$model2->save()) {
                        throw new Exception("Có lỗi xảy ra");
                    }
                }
            }
            return $this->redirect(['lesson-document', 'course_id' => $course_id, 'lesson_id' => $lesson_id]);
        } else {
            return $this->render('lesson/document/create', [
                'model' => $model,
                'lesson' => $lesson
            ]);
        }
    }

    public function actionUpdateLessonDocument($document_id, $course_id, $lesson_id)
    {
        $lesson = $this->findObject2($lesson_id, $course_id);
        $model = LessonDocument::findOne(['id' => $document_id]);
        $model->scenario = 'update';
        if ($model->load(Yii::$app->request->post())) {
            $model->file = UploadedFile::getInstances($model, 'file');
            $model->document_name = Utility::rewrite($model->file[0]->baseName) . '.' . $model->file[0]->extension;
            if ($model->save() && $model->upload_file($lesson->course_id, $model->lesson_id, 'document')) {
                return $this->redirect(['lesson-document', 'course_id' => $course_id, 'lesson_id' => $lesson_id]);
            } else {
                return $this->render('lesson/document/update', [
                    'model' => $model,
                    'lesson' => $lesson
                ]);
            }
        } else {
            return $this->render('lesson/document/update', [
                'model' => $model,
                'lesson' => $lesson
            ]);
        }
    }

    public function actionDeleteLessonDocument($document_id, $course_id, $lesson_id)
    {
        $model = LessonDocument::findOne(['id' => $document_id]);
        $session = Yii::$app->session;
        if (!empty($model)) {
            if ($model->delete()) {
                $session->setFlash('success', 'Xóa thành công');
            } else {
                $session->setFlash('error', 'Có lỗi xảy ra. Vui lòng thử lại sau.');
            }
        }
        return $this->redirect(['lesson-document', 'course_id' => $course_id, 'lesson_id' => $lesson_id]);
    }

    public function actionLessonQuiz($course_id, $lesson_id)
    {
        $lesson = $this->findObject2($lesson_id, $course_id);
        $dataProvider = new ActiveDataProvider([
            'query' => LessonQuiz::find()->where(['lesson_id' => $lesson_id])
        ]);

        return $this->render('lesson/quiz/index', [
            'lesson' => $lesson,
            'dataProvider' => $dataProvider
        ]);
    }


    private function findObject($course_id)
    {
        $model = Teacher::get_course_by_teacher($course_id, $this->_user['id']);
        if (empty($model)) {
            throw new NotFoundHttpException("Trang bạn yêu cầu không tìm thấy hoặc bạn không có quyền");
        }
        return $model;
    }

    private function findObject2($lesson_id, $course_id)
    {
        $model = Teacher::get_lesson_by_teacher($lesson_id, $course_id, $this->_user['id']);
        if (empty($model)) {
            throw new NotFoundHttpException("Trang bạn yêu cầu không tìm thấy hoặc bạn không có quyền");
        }
        return $model;
    }
}